const Database = require('better-sqlite3');

const db = new Database('database.sqlite');

console.log('üîß Inserindo dados de teste...');

// Inserir aplica√ß√µes de cr√©dito de teste
const insertCredit = db.prepare(`
  INSERT INTO credit_applications (
    user_id, company_data, requested_amount, 
    status, financial_status, admin_status, created_at
  ) VALUES (?, ?, ?, ?, ?, ?, ?)
`);

try {
  const companyData1 = JSON.stringify({
    legalCompanyName: 'Empresa Teste Ltda',
    cnpj: '12345678000123',
    address: 'Rua Teste, 123'
  });
  
  const companyData2 = JSON.stringify({
    legalCompanyName: 'Importadora ABC',
    cnpj: '98765432000109',
    address: 'Av. Principal, 456'
  });
  
  insertCredit.run(20, companyData1, 750000, 'approved', 'approved', 'admin_finalized', new Date().toISOString());
  insertCredit.run(22, companyData2, 500000, 'pending', 'pending', 'pending', new Date().toISOString());
  
  console.log('‚úÖ Aplica√ß√µes de cr√©dito inseridas!');
} catch (error) {
  console.log('‚ö†Ô∏è Aplica√ß√µes j√° existem ou erro:', error.message);
}

// Atualizar importa√ß√µes existentes para ter credit_application_id
const updateImport = db.prepare(`
  UPDATE imports 
  SET credit_application_id = ? 
  WHERE user_id = ? AND credit_application_id IS NULL
`);

try {
  updateImport.run(1, 20);  // Importa√ß√£o do user 20 vinculada ao cr√©dito 1
  updateImport.run(1, 20);  // Segunda importa√ß√£o tamb√©m
  
  console.log('‚úÖ Importa√ß√µes atualizadas com credit_application_id!');
} catch (error) {
  console.log('‚ö†Ô∏è Erro ao atualizar importa√ß√µes:', error.message);
}

// Verificar dados finais
const credits = db.prepare('SELECT COUNT(*) as count FROM credit_applications').get();
const imports = db.prepare('SELECT COUNT(*) as count FROM imports').get();
const users = db.prepare('SELECT COUNT(*) as count FROM users').get();

console.log('\nüìä DADOS FINAIS:');
console.log(`Usu√°rios: ${users.count}`);
console.log(`Aplica√ß√µes de cr√©dito: ${credits.count}`);
console.log(`Importa√ß√µes: ${imports.count}`);

// Verificar sample import with credit_application_id
const sampleImport = db.prepare('SELECT id, import_name, user_id, credit_application_id FROM imports LIMIT 1').get();
console.log('\nüìã Sample import:', sampleImport);

db.close();
console.log('\nüéâ Dados de teste inseridos!');