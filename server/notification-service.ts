/**
 * SISTEMA COMPLETO DE NOTIFICA√á√ïES AUTOM√ÅTICAS - SPARK COMEX
 * Gera notifica√ß√µes inteligentes baseadas em eventos do sistema
 */

import { storage } from "./storage";

export type NotificationType = 
  | 'credit_application_submitted'
  | 'credit_pre_approved'
  | 'credit_submitted_to_financial'
  | 'credit_approved'
  | 'credit_rejected'
  | 'credit_finalized'
  | 'import_created'
  | 'import_status_changed'
  | 'payment_due_reminder'
  | 'payment_overdue'
  | 'payment_completed'
  | 'document_uploaded'
  | 'document_missing'
  | 'supplier_added'
  | 'system_alert'
  | 'credit_limit_warning'
  | 'import_delivery_reminder';

export interface NotificationData {
  type: NotificationType;
  userId: number;
  title: string;
  message: string;
  actionUrl?: string;
  metadata?: Record<string, any>;
  priority: 'low' | 'medium' | 'high' | 'urgent';
}

class NotificationService {
  /**
   * Cria uma nova notifica√ß√£o no sistema
   */
  async createNotification(data: NotificationData): Promise<void> {
    try {
      await storage.createNotification({
        userId: data.userId,
        type: data.type,
        title: data.title,
        message: data.message,
        actionUrl: data.actionUrl,
        metadata: data.metadata,
        priority: data.priority,
        isRead: false
      });

      console.log(`üîî Notifica√ß√£o criada: ${data.type} para usu√°rio ${data.userId}`);
    } catch (error) {
      console.error('‚ùå Erro ao criar notifica√ß√£o:', error);
    }
  }

  /**
   * EVENTOS DE CR√âDITO
   */
  
  // Quando importador submete solicita√ß√£o de cr√©dito
  async onCreditApplicationSubmitted(userId: number, applicationId: number, companyName: string): Promise<void> {
    await this.createNotification({
      type: 'credit_application_submitted',
      userId,
      title: 'Solicita√ß√£o de Cr√©dito Enviada',
      message: `Sua solicita√ß√£o de cr√©dito foi recebida e est√° em an√°lise. Acompanhe o status na √°rea de cr√©dito.`,
      actionUrl: `/credit/${applicationId}`,
      priority: 'medium',
      metadata: { applicationId, companyName }
    });

    // Notificar administradores sobre nova solicita√ß√£o
    const admins = await storage.getUsersByRole('admin');
    for (const admin of admins) {
      await this.createNotification({
        type: 'credit_application_submitted',
        userId: admin.id,
        title: 'Nova Solicita√ß√£o de Cr√©dito',
        message: `${companyName} enviou uma nova solicita√ß√£o de cr√©dito para an√°lise.`,
        actionUrl: `/credit/${applicationId}`,
        priority: 'high',
        metadata: { applicationId, companyName, importerUserId: userId }
      });
    }
  }

  // Quando admin pr√©-aprova cr√©dito
  async onCreditPreApproved(userId: number, applicationId: number, adminName: string): Promise<void> {
    await this.createNotification({
      type: 'credit_pre_approved',
      userId,
      title: 'Cr√©dito Pr√©-Aprovado',
      message: `Sua solicita√ß√£o de cr√©dito foi pr√©-aprovada e enviada para an√°lise financeira final.`,
      actionUrl: `/credit/${applicationId}`,
      priority: 'high',
      metadata: { applicationId, adminName }
    });

    // Notificar financeira sobre nova an√°lise
    const financeiras = await storage.getUsersByRole('financeira');
    for (const financeira of financeiras) {
      await this.createNotification({
        type: 'credit_submitted_to_financial',
        userId: financeira.id,
        title: 'Nova An√°lise Financeira',
        message: `Solicita√ß√£o de cr√©dito pr√©-aprovada aguarda an√°lise financeira final.`,
        actionUrl: `/credit/${applicationId}`,
        priority: 'high',
        metadata: { applicationId, adminName }
      });
    }
  }

  // Quando financeira aprova cr√©dito
  async onCreditApproved(userId: number, applicationId: number, creditLimit: number): Promise<void> {
    await this.createNotification({
      type: 'credit_approved',
      userId,
      title: 'Cr√©dito Aprovado',
      message: `Parab√©ns! Seu cr√©dito foi aprovado. Aguarde a finaliza√ß√£o dos termos pelo administrador.`,
      actionUrl: `/credit/${applicationId}`,
      priority: 'high',
      metadata: { applicationId, creditLimit }
    });

    // Notificar admins para finaliza√ß√£o
    const admins = await storage.getUsersByRole('admin');
    for (const admin of admins) {
      await this.createNotification({
        type: 'credit_approved',
        userId: admin.id,
        title: 'Cr√©dito Aprovado - Finalizar Termos',
        message: `Cr√©dito aprovado pela financeira. Finalize os termos para liberar ao cliente.`,
        actionUrl: `/credit/${applicationId}`,
        priority: 'high',
        metadata: { applicationId, creditLimit }
      });
    }
  }

  // Quando financeira rejeita cr√©dito
  async onCreditRejected(userId: number, applicationId: number, reason?: string): Promise<void> {
    await this.createNotification({
      type: 'credit_rejected',
      userId,
      title: 'Solicita√ß√£o de Cr√©dito Negada',
      message: `Infelizmente sua solicita√ß√£o de cr√©dito foi negada. ${reason ? `Motivo: ${reason}` : 'Entre em contato para mais informa√ß√µes.'}`,
      actionUrl: `/credit/${applicationId}`,
      priority: 'high',
      metadata: { applicationId, reason }
    });
  }

  // Quando admin finaliza termos do cr√©dito
  async onCreditFinalized(userId: number, applicationId: number, finalCreditLimit: number): Promise<void> {
    await this.createNotification({
      type: 'credit_finalized',
      userId,
      title: 'Cr√©dito Liberado!',
      message: `Seu cr√©dito de US$ ${finalCreditLimit.toLocaleString()} est√° liberado e dispon√≠vel para uso!`,
      actionUrl: `/credit/${applicationId}`,
      priority: 'urgent',
      metadata: { applicationId, finalCreditLimit }
    });
  }

  /**
   * EVENTOS DE IMPORTA√á√ÉO
   */

  // Quando nova importa√ß√£o √© criada
  async onImportCreated(userId: number, importId: number, importName: string, totalValue: number): Promise<void> {
    await this.createNotification({
      type: 'import_created',
      userId,
      title: 'Nova Importa√ß√£o Criada',
      message: `Importa√ß√£o "${importName}" foi criada com sucesso. Valor: US$ ${totalValue.toLocaleString()}.`,
      actionUrl: `/imports/${importId}`,
      priority: 'medium',
      metadata: { importId, importName, totalValue }
    });
  }

  // Quando status da importa√ß√£o muda
  async onImportStatusChanged(userId: number, importId: number, importName: string, oldStatus: string, newStatus: string): Promise<void> {
    const statusMessages: Record<string, string> = {
      'planejamento': 'em planejamento',
      'producao': 'em produ√ß√£o',
      'entregue_agente': 'entregue ao agente',
      'transporte_maritimo': 'em transporte mar√≠timo',
      'transporte_aereo': 'em transporte a√©reo',
      'desembaraco': 'em desembara√ßo',
      'transporte_nacional': 'em transporte nacional',
      'concluido': 'conclu√≠da'
    };

    const statusMessage = statusMessages[newStatus] || newStatus;
    
    await this.createNotification({
      type: 'import_status_changed',
      userId,
      title: 'Status da Importa√ß√£o Atualizado',
      message: `"${importName}" est√° agora ${statusMessage}.`,
      actionUrl: `/imports/${importId}`,
      priority: newStatus === 'concluido' ? 'high' : 'medium',
      metadata: { importId, importName, oldStatus, newStatus }
    });
  }

  /**
   * EVENTOS DE PAGAMENTO
   */

  // Lembrete de pagamento pr√≥ximo ao vencimento (3 dias antes)
  async onPaymentDueReminder(userId: number, paymentId: number, amount: number, dueDate: string, importName: string): Promise<void> {
    await this.createNotification({
      type: 'payment_due_reminder',
      userId,
      title: 'Pagamento Pr√≥ximo ao Vencimento',
      message: `Pagamento de US$ ${amount.toLocaleString()} da importa√ß√£o "${importName}" vence em 3 dias (${new Date(dueDate).toLocaleDateString('pt-BR')}).`,
      actionUrl: `/payments/${paymentId}`,
      priority: 'high',
      metadata: { paymentId, amount, dueDate, importName }
    });
  }

  // Pagamento em atraso
  async onPaymentOverdue(userId: number, paymentId: number, amount: number, dueDate: string, importName: string): Promise<void> {
    await this.createNotification({
      type: 'payment_overdue',
      userId,
      title: 'Pagamento em Atraso',
      message: `URGENTE: Pagamento de US$ ${amount.toLocaleString()} da importa√ß√£o "${importName}" est√° em atraso desde ${new Date(dueDate).toLocaleDateString('pt-BR')}.`,
      actionUrl: `/payments/${paymentId}`,
      priority: 'urgent',
      metadata: { paymentId, amount, dueDate, importName }
    });
  }

  // Pagamento realizado
  async onPaymentCompleted(userId: number, paymentId: number, amount: number, importName: string): Promise<void> {
    await this.createNotification({
      type: 'payment_completed',
      userId,
      title: 'Pagamento Confirmado',
      message: `Pagamento de US$ ${amount.toLocaleString()} da importa√ß√£o "${importName}" foi confirmado com sucesso.`,
      actionUrl: `/payments/${paymentId}`,
      priority: 'medium',
      metadata: { paymentId, amount, importName }
    });
  }

  /**
   * EVENTOS DE DOCUMENTOS
   */

  // Documento carregado
  async onDocumentUploaded(userId: number, documentType: string, applicationId?: number, importId?: number): Promise<void> {
    const entityUrl = applicationId ? `/credit/${applicationId}` : `/imports/${importId}`;
    
    await this.createNotification({
      type: 'document_uploaded',
      userId,
      title: 'Documento Enviado',
      message: `Documento "${documentType}" foi enviado com sucesso.`,
      actionUrl: entityUrl,
      priority: 'low',
      metadata: { documentType, applicationId, importId }
    });
  }

  // Documento pendente/faltando
  async onDocumentMissing(userId: number, documentType: string, applicationId?: number, importId?: number): Promise<void> {
    const entityUrl = applicationId ? `/credit/${applicationId}` : `/imports/${importId}`;
    
    await this.createNotification({
      type: 'document_missing',
      userId,
      title: 'Documento Pendente',
      message: `O documento "${documentType}" ainda n√£o foi enviado. Complete o envio para agilizar o processo.`,
      actionUrl: entityUrl,
      priority: 'medium',
      metadata: { documentType, applicationId, importId }
    });
  }

  /**
   * EVENTOS DE FORNECEDORES
   */

  // Novo fornecedor adicionado
  async onSupplierAdded(userId: number, supplierId: number, supplierName: string): Promise<void> {
    await this.createNotification({
      type: 'supplier_added',
      userId,
      title: 'Novo Fornecedor Cadastrado',
      message: `Fornecedor "${supplierName}" foi cadastrado com sucesso.`,
      actionUrl: `/suppliers/${supplierId}`,
      priority: 'low',
      metadata: { supplierId, supplierName }
    });
  }

  /**
   * ALERTAS DO SISTEMA
   */

  // Alerta de limite de cr√©dito
  async onCreditLimitWarning(userId: number, usedPercentage: number, remainingCredit: number): Promise<void> {
    await this.createNotification({
      type: 'credit_limit_warning',
      userId,
      title: 'Limite de Cr√©dito em Alerta',
      message: `Voc√™ utilizou ${usedPercentage}% do seu cr√©dito. Restam US$ ${remainingCredit.toLocaleString()} dispon√≠veis.`,
      actionUrl: '/credit',
      priority: usedPercentage >= 90 ? 'urgent' : 'high',
      metadata: { usedPercentage, remainingCredit }
    });
  }

  // Lembrete de entrega da importa√ß√£o
  async onImportDeliveryReminder(userId: number, importId: number, importName: string, estimatedDelivery: string): Promise<void> {
    await this.createNotification({
      type: 'import_delivery_reminder',
      userId,
      title: 'Importa√ß√£o Pr√≥xima da Entrega',
      message: `"${importName}" tem entrega prevista para ${new Date(estimatedDelivery).toLocaleDateString('pt-BR')}.`,
      actionUrl: `/imports/${importId}`,
      priority: 'medium',
      metadata: { importId, importName, estimatedDelivery }
    });
  }

  /**
   * VERIFICA√á√ïES AUTOM√ÅTICAS PERI√ìDICAS
   */

  // Verifica pagamentos pr√≥ximos ao vencimento (executar diariamente)
  async checkUpcomingPayments(): Promise<void> {
    try {
      const threeDaysFromNow = new Date();
      threeDaysFromNow.setDate(threeDaysFromNow.getDate() + 3);

      const upcomingPayments = await storage.getPaymentsDueBefore(threeDaysFromNow);
      
      for (const payment of upcomingPayments) {
        // Verificar se j√° foi enviada notifica√ß√£o para este pagamento
        const existingNotification = await storage.getNotificationByPaymentReminder(payment.id);
        if (!existingNotification) {
          const importData = await storage.getImportById(payment.importId);
          if (importData) {
            await this.onPaymentDueReminder(
              importData.userId,
              payment.id,
              parseFloat(payment.amount),
              payment.dueDate.toISOString(),
              importData.importName || `Importa√ß√£o #${importData.id}`
            );
          }
        }
      }
    } catch (error) {
      console.error('‚ùå Erro ao verificar pagamentos pr√≥ximos:', error);
    }
  }

  // Verifica pagamentos em atraso (executar diariamente)
  async checkOverduePayments(): Promise<void> {
    try {
      const today = new Date();
      const overduePayments = await storage.getOverduePayments(today);
      
      for (const payment of overduePayments) {
        const importData = await storage.getImportById(payment.importId);
        if (importData) {
          await this.onPaymentOverdue(
            importData.userId,
            payment.id,
            parseFloat(payment.amount),
            payment.dueDate.toISOString(),
            importData.importName || `Importa√ß√£o #${importData.id}`
          );
        }
      }
    } catch (error) {
      console.error('‚ùå Erro ao verificar pagamentos em atraso:', error);
    }
  }

  // Verifica limites de cr√©dito pr√≥ximos do limite (executar semanalmente)
  async checkCreditLimits(): Promise<void> {
    try {
      const users = await storage.getAllActiveUsers();
      
      for (const user of users) {
        if (user.role === 'importer') {
          const creditInfo = await storage.getCreditInfoByUser(user.id);
          if (creditInfo && creditInfo.totalCredit > 0) {
            const usedPercentage = (creditInfo.usedCredit / creditInfo.totalCredit) * 100;
            
            // Alertar se usar mais de 80% do cr√©dito
            if (usedPercentage >= 80) {
              await this.onCreditLimitWarning(
                user.id,
                Math.round(usedPercentage),
                creditInfo.totalCredit - creditInfo.usedCredit
              );
            }
          }
        }
      }
    } catch (error) {
      console.error('‚ùå Erro ao verificar limites de cr√©dito:', error);
    }
  }
}

export const notificationService = new NotificationService();