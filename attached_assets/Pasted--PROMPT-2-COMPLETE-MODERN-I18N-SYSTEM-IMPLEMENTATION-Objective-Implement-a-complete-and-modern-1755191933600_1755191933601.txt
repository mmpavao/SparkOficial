# PROMPT 2: COMPLETE MODERN I18N SYSTEM IMPLEMENTATION

## Objective
Implement a complete and modern internationalization system using react-i18next, based on the successful architecture from Spark Comex project.

## VERIFIED PREREQUISITES
- [ ] Analysis from Prompt 1 completed
- [ ] Legacy systems removed
- [ ] Dependencies installed
- [ ] Base structure prepared

---

## PHASE 1: INSTALLATION & BASE CONFIGURATION

### 1.1 Install Dependencies

```bash
npm install react-i18next i18next i18next-browser-languagedetector
```

### 1.2 Create Folder Structure

```bash
# Create i18n structure
mkdir -p src/i18n
mkdir -p src/contexts
```

### 1.3 Create Main Configuration File

**File: `src/i18n/index.ts`**

```typescript
import i18n from 'i18next';
import { initReactI18next } from 'react-i18next';
import LanguageDetector from 'i18next-browser-languagedetector';

// Import translations
import translationPT from './pt-BR.json';
import translationEN from './en.json';
import translationZH from './zh.json';
import translationES from './es.json';
import translationFR from './fr.json';

const resources = {
  'pt-BR': { translation: translationPT },
  en: { translation: translationEN },
  zh: { translation: translationZH },
  es: { translation: translationES },
  fr: { translation: translationFR },
};

i18n
  .use(LanguageDetector)
  .use(initReactI18next)
  .init({
    resources,
    fallbackLng: 'pt-BR', // Set your default language
    interpolation: { escapeValue: false },
    supportedLngs: ['pt-BR', 'en', 'zh', 'es', 'fr'],
    detection: { 
      order: ['localStorage', 'navigator'], 
      caches: ['localStorage'] 
    },
    debug: process.env.NODE_ENV === 'development',
  });

export default i18n;
```

---

## PHASE 2: TRANSLATION FILES CREATION

### 2.1 Base Portuguese Translation (pt-BR.json)

**File: `src/i18n/pt-BR.json`**

```json
{
  "common": {
    "save": "Salvar",
    "cancel": "Cancelar",
    "loading": "Carregando...",
    "error": "Erro",
    "success": "Sucesso",
    "edit": "Editar",
    "delete": "Excluir",
    "view": "Visualizar",
    "search": "Buscar",
    "filter": "Filtrar",
    "clear": "Limpar",
    "confirm": "Confirmar",
    "back": "Voltar",
    "next": "Próximo",
    "previous": "Anterior",
    "finish": "Finalizar",
    "close": "Fechar",
    "yes": "Sim",
    "no": "Não"
  },
  "nav": {
    "dashboard": "Dashboard",
    "home": "Início",
    "profile": "Perfil",
    "settings": "Configurações",
    "help": "Ajuda",
    "logout": "Sair",
    "menu": "Menu"
  },
  "dashboard": {
    "welcome": "Bem-vindo",
    "overview": "Visão Geral",
    "statistics": "Estatísticas",
    "recentActivity": "Atividade Recente",
    "quickActions": "Ações Rápidas",
    "notifications": "Notificações"
  },
  "forms": {
    "firstName": "Nome",
    "lastName": "Sobrenome",
    "email": "E-mail",
    "password": "Senha",
    "confirmPassword": "Confirmar Senha",
    "phone": "Telefone",
    "address": "Endereço",
    "city": "Cidade",
    "country": "País",
    "zipCode": "CEP",
    "birthDate": "Data de Nascimento",
    "required": "Campo obrigatório",
    "invalid": "Campo inválido",
    "tooShort": "Muito curto",
    "tooLong": "Muito longo"
  },
  "auth": {
    "login": "Entrar",
    "register": "Cadastrar",
    "forgotPassword": "Esqueceu a senha?",
    "resetPassword": "Redefinir Senha",
    "newPassword": "Nova Senha",
    "confirmNewPassword": "Confirmar Nova Senha",
    "loginSuccess": "Login realizado com sucesso",
    "registerSuccess": "Cadastro realizado com sucesso",
    "logoutSuccess": "Logout realizado com sucesso",
    "invalidCredentials": "Credenciais inválidas",
    "accountNotFound": "Conta não encontrada",
    "rememberMe": "Lembrar de mim"
  },
  "status": {
    "active": "Ativo",
    "inactive": "Inativo",
    "pending": "Pendente",
    "approved": "Aprovado",
    "rejected": "Rejeitado",
    "completed": "Concluído",
    "cancelled": "Cancelado",
    "inProgress": "Em Andamento"
  },
  "time": {
    "today": "Hoje",
    "yesterday": "Ontem",
    "tomorrow": "Amanhã",
    "thisWeek": "Esta Semana",
    "lastWeek": "Semana Passada",
    "thisMonth": "Este Mês",
    "lastMonth": "Mês Passado",
    "thisYear": "Este Ano",
    "never": "Nunca"
  }
}
```

### 2.2 English Translation

**File: `src/i18n/en.json`**

```json
{
  "common": {
    "save": "Save",
    "cancel": "Cancel",
    "loading": "Loading...",
    "error": "Error",
    "success": "Success",
    "edit": "Edit",
    "delete": "Delete",
    "view": "View",
    "search": "Search",
    "filter": "Filter",
    "clear": "Clear",
    "confirm": "Confirm",
    "back": "Back",
    "next": "Next",
    "previous": "Previous",
    "finish": "Finish",
    "close": "Close",
    "yes": "Yes",
    "no": "No"
  },
  "nav": {
    "dashboard": "Dashboard",
    "home": "Home",
    "profile": "Profile",
    "settings": "Settings",
    "help": "Help",
    "logout": "Logout",
    "menu": "Menu"
  },
  "dashboard": {
    "welcome": "Welcome",
    "overview": "Overview",
    "statistics": "Statistics",
    "recentActivity": "Recent Activity",
    "quickActions": "Quick Actions",
    "notifications": "Notifications"
  },
  "forms": {
    "firstName": "First Name",
    "lastName": "Last Name",
    "email": "Email",
    "password": "Password",
    "confirmPassword": "Confirm Password",
    "phone": "Phone",
    "address": "Address",
    "city": "City",
    "country": "Country",
    "zipCode": "ZIP Code",
    "birthDate": "Birth Date",
    "required": "Required field",
    "invalid": "Invalid field",
    "tooShort": "Too short",
    "tooLong": "Too long"
  },
  "auth": {
    "login": "Login",
    "register": "Register",
    "forgotPassword": "Forgot Password?",
    "resetPassword": "Reset Password",
    "newPassword": "New Password",
    "confirmNewPassword": "Confirm New Password",
    "loginSuccess": "Login successful",
    "registerSuccess": "Registration successful",
    "logoutSuccess": "Logout successful",
    "invalidCredentials": "Invalid credentials",
    "accountNotFound": "Account not found",
    "rememberMe": "Remember me"
  },
  "status": {
    "active": "Active",
    "inactive": "Inactive",
    "pending": "Pending",
    "approved": "Approved",
    "rejected": "Rejected",
    "completed": "Completed",
    "cancelled": "Cancelled",
    "inProgress": "In Progress"
  },
  "time": {
    "today": "Today",
    "yesterday": "Yesterday",
    "tomorrow": "Tomorrow",
    "thisWeek": "This Week",
    "lastWeek": "Last Week",
    "thisMonth": "This Month",
    "lastMonth": "Last Month",
    "thisYear": "This Year",
    "never": "Never"
  }
}
```

### 2.3 Chinese Translation

**File: `src/i18n/zh.json`**

```json
{
  "common": {
    "save": "保存",
    "cancel": "取消",
    "loading": "加载中...",
    "error": "错误",
    "success": "成功",
    "edit": "编辑",
    "delete": "删除",
    "view": "查看",
    "search": "搜索",
    "filter": "过滤",
    "clear": "清除",
    "confirm": "确认",
    "back": "返回",
    "next": "下一个",
    "previous": "上一个",
    "finish": "完成",
    "close": "关闭",
    "yes": "是",
    "no": "否"
  },
  "nav": {
    "dashboard": "仪表板",
    "home": "首页",
    "profile": "个人资料",
    "settings": "设置",
    "help": "帮助",
    "logout": "退出",
    "menu": "菜单"
  },
  "dashboard": {
    "welcome": "欢迎",
    "overview": "概览",
    "statistics": "统计",
    "recentActivity": "最近活动",
    "quickActions": "快速操作",
    "notifications": "通知"
  },
  "forms": {
    "firstName": "名",
    "lastName": "姓",
    "email": "邮箱",
    "password": "密码",
    "confirmPassword": "确认密码",
    "phone": "电话",
    "address": "地址",
    "city": "城市",
    "country": "国家",
    "zipCode": "邮编",
    "birthDate": "出生日期",
    "required": "必填字段",
    "invalid": "无效字段",
    "tooShort": "太短",
    "tooLong": "太长"
  },
  "auth": {
    "login": "登录",
    "register": "注册",
    "forgotPassword": "忘记密码？",
    "resetPassword": "重置密码",
    "newPassword": "新密码",
    "confirmNewPassword": "确认新密码",
    "loginSuccess": "登录成功",
    "registerSuccess": "注册成功",
    "logoutSuccess": "退出成功",
    "invalidCredentials": "凭据无效",
    "accountNotFound": "账户未找到",
    "rememberMe": "记住我"
  },
  "status": {
    "active": "活跃",
    "inactive": "非活跃",
    "pending": "待处理",
    "approved": "已批准",
    "rejected": "已拒绝",
    "completed": "已完成",
    "cancelled": "已取消",
    "inProgress": "进行中"
  },
  "time": {
    "today": "今天",
    "yesterday": "昨天",
    "tomorrow": "明天",
    "thisWeek": "本周",
    "lastWeek": "上周",
    "thisMonth": "本月",
    "lastMonth": "上月",
    "thisYear": "今年",
    "never": "从不"
  }
}
```

### 2.4 Spanish Translation

**File: `src/i18n/es.json`**

```json
{
  "common": {
    "save": "Guardar",
    "cancel": "Cancelar",
    "loading": "Cargando...",
    "error": "Error",
    "success": "Éxito",
    "edit": "Editar",
    "delete": "Eliminar",
    "view": "Ver",
    "search": "Buscar",
    "filter": "Filtrar",
    "clear": "Limpiar",
    "confirm": "Confirmar",
    "back": "Atrás",
    "next": "Siguiente",
    "previous": "Anterior",
    "finish": "Finalizar",
    "close": "Cerrar",
    "yes": "Sí",
    "no": "No"
  },
  "nav": {
    "dashboard": "Panel",
    "home": "Inicio",
    "profile": "Perfil",
    "settings": "Configuración",
    "help": "Ayuda",
    "logout": "Salir",
    "menu": "Menú"
  },
  "dashboard": {
    "welcome": "Bienvenido",
    "overview": "Resumen",
    "statistics": "Estadísticas",
    "recentActivity": "Actividad Reciente",
    "quickActions": "Acciones Rápidas",
    "notifications": "Notificaciones"
  },
  "forms": {
    "firstName": "Nombre",
    "lastName": "Apellido",
    "email": "Correo",
    "password": "Contraseña",
    "confirmPassword": "Confirmar Contraseña",
    "phone": "Teléfono",
    "address": "Dirección",
    "city": "Ciudad",
    "country": "País",
    "zipCode": "Código Postal",
    "birthDate": "Fecha de Nacimiento",
    "required": "Campo requerido",
    "invalid": "Campo inválido",
    "tooShort": "Muy corto",
    "tooLong": "Muy largo"
  },
  "auth": {
    "login": "Iniciar Sesión",
    "register": "Registrarse",
    "forgotPassword": "¿Olvidaste la contraseña?",
    "resetPassword": "Restablecer Contraseña",
    "newPassword": "Nueva Contraseña",
    "confirmNewPassword": "Confirmar Nueva Contraseña",
    "loginSuccess": "Inicio de sesión exitoso",
    "registerSuccess": "Registro exitoso",
    "logoutSuccess": "Cierre de sesión exitoso",
    "invalidCredentials": "Credenciales inválidas",
    "accountNotFound": "Cuenta no encontrada",
    "rememberMe": "Recordarme"
  },
  "status": {
    "active": "Activo",
    "inactive": "Inactivo",
    "pending": "Pendiente",
    "approved": "Aprobado",
    "rejected": "Rechazado",
    "completed": "Completado",
    "cancelled": "Cancelado",
    "inProgress": "En Progreso"
  },
  "time": {
    "today": "Hoy",
    "yesterday": "Ayer",
    "tomorrow": "Mañana",
    "thisWeek": "Esta Semana",
    "lastWeek": "Semana Pasada",
    "thisMonth": "Este Mes",
    "lastMonth": "Mes Pasado",
    "thisYear": "Este Año",
    "never": "Nunca"
  }
}
```

### 2.5 French Translation

**File: `src/i18n/fr.json`**

```json
{
  "common": {
    "save": "Enregistrer",
    "cancel": "Annuler",
    "loading": "Chargement...",
    "error": "Erreur",
    "success": "Succès",
    "edit": "Modifier",
    "delete": "Supprimer",
    "view": "Voir",
    "search": "Rechercher",
    "filter": "Filtrer",
    "clear": "Effacer",
    "confirm": "Confirmer",
    "back": "Retour",
    "next": "Suivant",
    "previous": "Précédent",
    "finish": "Terminer",
    "close": "Fermer",
    "yes": "Oui",
    "no": "Non"
  },
  "nav": {
    "dashboard": "Tableau de bord",
    "home": "Accueil",
    "profile": "Profil",
    "settings": "Paramètres",
    "help": "Aide",
    "logout": "Se déconnecter",
    "menu": "Menu"
  },
  "dashboard": {
    "welcome": "Bienvenue",
    "overview": "Aperçu",
    "statistics": "Statistiques",
    "recentActivity": "Activité Récente",
    "quickActions": "Actions Rapides",
    "notifications": "Notifications"
  },
  "forms": {
    "firstName": "Prénom",
    "lastName": "Nom",
    "email": "E-mail",
    "password": "Mot de passe",
    "confirmPassword": "Confirmer le mot de passe",
    "phone": "Téléphone",
    "address": "Adresse",
    "city": "Ville",
    "country": "Pays",
    "zipCode": "Code postal",
    "birthDate": "Date de naissance",
    "required": "Champ requis",
    "invalid": "Champ invalide",
    "tooShort": "Trop court",
    "tooLong": "Trop long"
  },
  "auth": {
    "login": "Se connecter",
    "register": "S'inscrire",
    "forgotPassword": "Mot de passe oublié ?",
    "resetPassword": "Réinitialiser le mot de passe",
    "newPassword": "Nouveau mot de passe",
    "confirmNewPassword": "Confirmer le nouveau mot de passe",
    "loginSuccess": "Connexion réussie",
    "registerSuccess": "Inscription réussie",
    "logoutSuccess": "Déconnexion réussie",
    "invalidCredentials": "Identifiants invalides",
    "accountNotFound": "Compte introuvable",
    "rememberMe": "Se souvenir de moi"
  },
  "status": {
    "active": "Actif",
    "inactive": "Inactif",
    "pending": "En attente",
    "approved": "Approuvé",
    "rejected": "Rejeté",
    "completed": "Terminé",
    "cancelled": "Annulé",
    "inProgress": "En cours"
  },
  "time": {
    "today": "Aujourd'hui",
    "yesterday": "Hier",
    "tomorrow": "Demain",
    "thisWeek": "Cette semaine",
    "lastWeek": "Semaine dernière",
    "thisMonth": "Ce mois",
    "lastMonth": "Mois dernier",
    "thisYear": "Cette année",
    "never": "Jamais"
  }
}
```

---

## PHASE 3: MODERN CONTEXT PROVIDER

### 3.1 Create LanguageContext

**File: `src/contexts/LanguageContext.tsx`**

```typescript
import React, { createContext, useContext, useEffect, useState } from 'react';
import { useTranslation } from 'react-i18next';

interface LanguageContextType {
  currentLanguage: string;
  changeLanguage: (language: string) => void;
  isChanging: boolean;
  availableLanguages: Array<{
    code: string;
    name: string;
    flag: string;
  }>;
}

const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

interface LanguageProviderProps {
  children: React.ReactNode;
}

const AVAILABLE_LANGUAGES = [
  { code: 'pt-BR', name: 'Português', flag: '🇧🇷' },
  { code: 'en', name: 'English', flag: '🇺🇸' },
  { code: 'zh', name: '中文', flag: '🇨🇳' },
  { code: 'es', name: 'Español', flag: '🇪🇸' },
  { code: 'fr', name: 'Français', flag: '🇫🇷' }
];

export const LanguageProvider: React.FC<LanguageProviderProps> = ({ children }) => {
  const { i18n } = useTranslation();
  const [currentLanguage, setCurrentLanguage] = useState(i18n.language);
  const [isChanging, setIsChanging] = useState(false);

  useEffect(() => {
    setCurrentLanguage(i18n.language);
  }, [i18n.language]);

  const changeLanguage = async (language: string) => {
    if (language === currentLanguage || isChanging) return;
    
    setIsChanging(true);
    
    try {
      // Change language in i18next
      await i18n.changeLanguage(language);
      
      // Update local state
      setCurrentLanguage(language);
      
      // Save to localStorage
      localStorage.setItem('i18nextLng', language);
      
      // Dispatch custom event for global re-render
      window.dispatchEvent(new CustomEvent('languageChanged', { 
        detail: { language } 
      }));
      
      console.log(`✅ Language changed globally to: ${language}`);
      
    } catch (error) {
      console.error('❌ Error changing language:', error);
    } finally {
      setIsChanging(false);
    }
  };

  return (
    <LanguageContext.Provider value={{ 
      currentLanguage, 
      changeLanguage, 
      isChanging,
      availableLanguages: AVAILABLE_LANGUAGES
    }}>
      {children}
    </LanguageContext.Provider>
  );
};

export const useLanguage = () => {
  const context = useContext(LanguageContext);
  if (context === undefined) {
    throw new Error('useLanguage must be used within a LanguageProvider');
  }
  return context;
};
```

---

## PHASE 4: LANGUAGE SELECTOR COMPONENT

### 4.1 Create Language Selector Component

**File: `src/components/ui/language-selector.tsx`**

```typescript
import { useTranslation } from "react-i18next";
import { useLanguage } from "@/contexts/LanguageContext";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Globe, Loader2 } from "lucide-react";

export default function LanguageSelector() {
  const { t } = useTranslation();
  const { currentLanguage, changeLanguage, isChanging, availableLanguages } = useLanguage();

  const handleLanguageChange = (languageCode: string) => {
    changeLanguage(languageCode);
  };

  const getCurrentLanguage = () => {
    return availableLanguages.find(lang => lang.code === currentLanguage) || availableLanguages[0];
  };

  return (
    <div className="relative">
      <Select 
        value={currentLanguage} 
        onValueChange={handleLanguageChange}
        disabled={isChanging}
      >
        <SelectTrigger className="w-auto min-w-[120px] h-9 border border-gray-200 bg-white hover:bg-gray-50 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 px-3 disabled:opacity-50 transition-all duration-200">
          <SelectValue>
            <div className="flex items-center gap-2">
              {isChanging ? (
                <Loader2 className="w-4 h-4 text-gray-600 animate-spin" />
              ) : (
                <Globe className="w-4 h-4 text-gray-600" />
              )}
              <span className="text-base">{getCurrentLanguage().flag}</span>
              <span className="text-sm font-medium text-gray-700 hidden sm:inline">
                {getCurrentLanguage().name}
              </span>
            </div>
          </SelectValue>
        </SelectTrigger>
        <SelectContent className="min-w-[160px] bg-white border border-gray-200 shadow-lg rounded-md">
          {availableLanguages.map((lang) => (
            <SelectItem 
              key={lang.code} 
              value={lang.code}
              className="cursor-pointer hover:bg-blue-50 focus:bg-blue-50 px-3 py-2 transition-colors duration-150"
            >
              <div className="flex items-center gap-3">
                <span className="text-base">{lang.flag}</span>
                <span className="text-sm font-medium">{lang.name}</span>
                {lang.code === currentLanguage && (
                  <span className="text-xs text-blue-600 font-medium ml-auto">✓</span>
                )}
              </div>
            </SelectItem>
          ))}
        </SelectContent>
      </Select>
      
      {/* Screen reader support */}
      <div className="sr-only">
        {t('common.loading')} - {currentLanguage} - Status: {isChanging ? 'Changing...' : 'Ready'}
      </div>
    </div>
  );
}
```

### 4.2 Alternative Simple Language Selector (if no UI library)

**File: `src/components/ui/simple-language-selector.tsx`**

```typescript
import { useTranslation } from "react-i18next";
import { useLanguage } from "@/contexts/LanguageContext";
import { useState } from "react";

export default function SimpleLanguageSelector() {
  const { t } = useTranslation();
  const { currentLanguage, changeLanguage, isChanging, availableLanguages } = useLanguage();
  const [isOpen, setIsOpen] = useState(false);

  const getCurrentLanguage = () => {
    return availableLanguages.find(lang => lang.code === currentLanguage) || availableLanguages[0];
  };

  const handleLanguageChange = (languageCode: string) => {
    changeLanguage(languageCode);
    setIsOpen(false);
  };

  return (
    <div className="relative">
      <button
        onClick={() => setIsOpen(!isOpen)}
        disabled={isChanging}
        className="flex items-center gap-2 px-3 py-2 border border-gray-200 rounded-md bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50 transition-all duration-200"
      >
        {isChanging ? (
          <span className="w-4 h-4 border-2 border-gray-300 border-t-blue-600 rounded-full animate-spin"></span>
        ) : (
          <span className="w-4 h-4 text-gray-600">🌐</span>
        )}
        <span className="text-base">{getCurrentLanguage().flag}</span>
        <span className="text-sm font-medium text-gray-700 hidden sm:inline">
          {getCurrentLanguage().name}
        </span>
        <span className="w-4 h-4 text-gray-400">▼</span>
      </button>

      {isOpen && (
        <>
          <div 
            className="fixed inset-0 z-10" 
            onClick={() => setIsOpen(false)}
          ></div>
          <div className="absolute top-full left-0 mt-1 min-w-[160px] bg-white border border-gray-200 rounded-md shadow-lg z-20">
            {availableLanguages.map((lang) => (
              <button
                key={lang.code}
                onClick={() => handleLanguageChange(lang.code)}
                className="w-full flex items-center gap-3 px-3 py-2 hover:bg-blue-50 focus:bg-blue-50 focus:outline-none transition-colors duration-150 first:rounded-t-md last:rounded-b-md"
              >
                <span className="text-base">{lang.flag}</span>
                <span className="text-sm font-medium">{lang.name}</span>
                {lang.code === currentLanguage && (
                  <span className="text-xs text-blue-600 font-medium ml-auto">✓</span>
                )}
              </button>
            ))}
          </div>
        </>
      )}
    </div>
  );
}
```

---

## PHASE 5: MAIN APP INTEGRATION

### 5.1 Update App.tsx

**File: `src/App.tsx`** (add marked lines)

```typescript
import { QueryClientProvider } from "@tanstack/react-query";
import { queryClient } from "./lib/queryClient";
import { Toaster } from "@/components/ui/toaster";
import { TooltipProvider } from "@/components/ui/tooltip";

// ✅ ADD: i18n imports
import "@/i18n";
import { I18nextProvider } from "react-i18next";
import i18n from "@/i18n";
import { LanguageProvider } from "./contexts/LanguageContext";

// Other imports...

function App() {
  return (
    <QueryClientProvider client={queryClient}>
      {/* ✅ ADD: i18n providers */}
      <I18nextProvider i18n={i18n}>
        <LanguageProvider>
          <TooltipProvider>
            <Toaster />
            {/* Your application content */}
            <Router />
          </TooltipProvider>
        </LanguageProvider>
      </I18nextProvider>
    </QueryClientProvider>
  );
}

export default App;
```

---

## PHASE 6: COMPONENT IMPLEMENTATION

### 6.1 Global Language Hook

**File: `src/hooks/useGlobalLanguage.ts`**

```typescript
import { useLanguage } from '@/contexts/LanguageContext';

export function useGlobalLanguage() {
  const { currentLanguage, changeLanguage, isChanging, availableLanguages } = useLanguage();
  
  return {
    language: currentLanguage,
    setLanguage: changeLanguage,
    isChanging,
    isReady: !isChanging,
    availableLanguages,
    
    // Helper methods
    isRTL: () => ['ar', 'he', 'fa'].includes(currentLanguage),
    getLanguageName: () => {
      const lang = availableLanguages.find(l => l.code === currentLanguage);
      return lang?.name || currentLanguage;
    },
    getLanguageFlag: () => {
      const lang = availableLanguages.find(l => l.code === currentLanguage);
      return lang?.flag || '🌐';
    }
  };
}
```

### 6.2 Component Usage Example

```typescript
import { useTranslation } from 'react-i18next';
import { useGlobalLanguage } from '@/hooks/useGlobalLanguage';

export default function ExampleComponent() {
  const { t } = useTranslation();
  const { language, isReady } = useGlobalLanguage();

  if (!isReady) {
    return <div>{t('common.loading')}</div>;
  }

  return (
    <div>
      <h1>{t('dashboard.welcome')}</h1>
      <p>{t('nav.dashboard')}</p>
      <button>{t('common.save')}</button>
      
      {/* Using interpolation */}
      <p>{t('auth.loginSuccess')}</p>
      
      {/* Current language info */}
      <small>Current language: {language}</small>
    </div>
  );
}
```

### 6.3 Form Component with Translation

```typescript
import { useTranslation } from 'react-i18next';
import { useForm } from 'react-hook-form';

interface LoginFormData {
  email: string;
  password: string;
}

export default function LoginForm() {
  const { t } = useTranslation();
  const { register, handleSubmit, formState: { errors } } = useForm<LoginFormData>();

  const onSubmit = (data: LoginFormData) => {
    console.log(data);
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
      <div>
        <label className="block text-sm font-medium text-gray-700">
          {t('forms.email')}
        </label>
        <input
          {...register('email', { required: t('forms.required') })}
          type="email"
          placeholder={t('forms.email')}
          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
        />
        {errors.email && (
          <p className="mt-1 text-sm text-red-600">{errors.email.message}</p>
        )}
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700">
          {t('forms.password')}
        </label>
        <input
          {...register('password', { required: t('forms.required') })}
          type="password"
          placeholder={t('forms.password')}
          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
        />
        {errors.password && (
          <p className="mt-1 text-sm text-red-600">{errors.password.message}</p>
        )}
      </div>

      <button
        type="submit"
        className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700"
      >
        {t('auth.login')}
      </button>
    </form>
  );
}
```

---

## PHASE 7: LAYOUT INTEGRATION

### 7.1 Add to Header/Navbar

```typescript
// In your Header/Navbar component
import LanguageSelector from '@/components/ui/language-selector';
import { useTranslation } from 'react-i18next';

export default function Header() {
  const { t } = useTranslation();

  return (
    <header className="flex justify-between items-center p-4 bg-white shadow-sm">
      <h1 className="text-xl font-semibold">{t('nav.dashboard')}</h1>
      
      <div className="flex items-center gap-4">
        <nav className="hidden md:flex space-x-4">
          <a href="/" className="text-gray-600 hover:text-gray-900">
            {t('nav.home')}
          </a>
          <a href="/profile" className="text-gray-600 hover:text-gray-900">
            {t('nav.profile')}
          </a>
          <a href="/settings" className="text-gray-600 hover:text-gray-900">
            {t('nav.settings')}
          </a>
        </nav>
        
        <LanguageSelector />
        
        <button className="text-gray-600 hover:text-gray-900">
          {t('nav.logout')}
        </button>
      </div>
    </header>
  );
}
```

### 7.2 Sidebar Navigation with Translation

```typescript
import { useTranslation } from 'react-i18next';

const navigationItems = [
  { key: 'dashboard', href: '/', icon: '📊' },
  { key: 'profile', href: '/profile', icon: '👤' },
  { key: 'settings', href: '/settings', icon: '⚙️' },
];

export default function Sidebar() {
  const { t } = useTranslation();

  return (
    <aside className="w-64 bg-gray-50 min-h-screen p-4">
      <nav className="space-y-2">
        {navigationItems.map((item) => (
          <a
            key={item.key}
            href={item.href}
            className="flex items-center gap-3 px-3 py-2 rounded-md hover:bg-gray-200 transition-colors"
          >
            <span>{item.icon}</span>
            <span>{t(`nav.${item.key}`)}</span>
          </a>
        ))}
      </nav>
    </aside>
  );
}
```

---

## PHASE 8: TESTING & VALIDATION

### 8.1 Implementation Checklist

- [ ] Dependencies installed correctly
- [ ] Configuration files created
- [ ] Base translations implemented (at least pt-BR and en)
- [ ] LanguageContext working
- [ ] LanguageSelector rendering
- [ ] Language switching working
- [ ] LocalStorage persisting choice
- [ ] Components using useTranslation()
- [ ] Fallbacks working for missing keys
- [ ] No console errors
- [ ] TypeScript compilation successful

### 8.2 Manual Testing

1. **Load application**: Should use browser language or pt-BR as fallback
2. **Switch language**: Selector should change texts immediately
3. **Reload page**: Should maintain selected language
4. **Missing keys**: Should show the key instead of breaking
5. **Performance**: Language switching should be instant

### 8.3 Verification Commands

```bash
# Check for TypeScript errors
npm run build

# Check if application starts without errors
npm run dev

# Look for untranslated strings
grep -r "\"[A-Z].*\"" --include="*.tsx" src/ | grep -v "className\|key\|data-" | head -10
```

### 8.4 Debug Component

```typescript
// Create a debug component to test translations
import { useTranslation } from 'react-i18next';
import { useGlobalLanguage } from '@/hooks/useGlobalLanguage';

export default function I18nDebug() {
  const { t, i18n } = useTranslation();
  const { language, availableLanguages } = useGlobalLanguage();

  return (
    <div className="fixed bottom-4 right-4 bg-white border rounded-lg p-4 shadow-lg text-xs">
      <h3 className="font-bold mb-2">I18n Debug</h3>
      <p>Current: {language}</p>
      <p>i18n.language: {i18n.language}</p>
      <p>Available: {availableLanguages.length}</p>
      <p>Test: {t('common.save')}</p>
      <p>Missing: {t('nonexistent.key')}</p>
    </div>
  );
}
```

---

## PHASE 9: EXPANDING TRANSLATIONS

### 9.1 Finding Hardcoded Text Script

```bash
# Find hardcoded text that needs translation
grep -r "\"[A-Z][a-z].*\"" --include="*.tsx" src/ | \
  grep -v "className\|key\|data-\|href\|src\|alt\|placeholder" | \
  head -20
```

### 9.2 Translation Patterns

```typescript
// ✅ CORRECT: Using translation keys
{t('common.save')}
{t('dashboard.welcome')}

// ❌ INCORRECT: Hardcoded text
{"Save"}
{"Welcome"}

// ✅ CORRECT: Interpolation
{t('dashboard.welcomeUser', { name: user.name })}

// ✅ CORRECT: Pluralization
{t('dashboard.itemCount', { count: items.length })}

// ✅ CORRECT: Conditional text
{isLoading ? t('common.loading') : t('common.save')}

// ✅ CORRECT: Dynamic keys
{t(`status.${item.status}`)}
```

### 9.3 Adding New Translation Keys

```json
// When adding new keys, follow the hierarchy:
{
  "module": {
    "section": {
      "specificKey": "Translation"
    }
  }
}

// Examples:
{
  "user": {
    "profile": {
      "editTitle": "Edit Profile",
      "saveSuccess": "Profile saved successfully"
    },
    "settings": {
      "title": "User Settings",
      "emailNotifications": "Email Notifications"
    }
  }
}
```

---

## PHASE 10: ADVANCED OPTIMIZATIONS

### 10.1 Namespace Organization (Large Projects)

```typescript
// For larger projects, organize by namespaces
// File: src/i18n/index.ts - Advanced version

import i18n from 'i18next';
import { initReactI18next } from 'react-i18next';
import LanguageDetector from 'i18next-browser-languagedetector';

// Import by namespace
import commonPT from './pt-BR/common.json';
import authPT from './pt-BR/auth.json';
import dashboardPT from './pt-BR/dashboard.json';

import commonEN from './en/common.json';
import authEN from './en/auth.json';
import dashboardEN from './en/dashboard.json';

const resources = {
  'pt-BR': {
    common: commonPT,
    auth: authPT,
    dashboard: dashboardPT,
  },
  en: {
    common: commonEN,
    auth: authEN,
    dashboard: dashboardEN,
  },
};

i18n
  .use(LanguageDetector)
  .use(initReactI18next)
  .init({
    resources,
    fallbackLng: 'pt-BR',
    defaultNS: 'common',
    interpolation: { escapeValue: false },
  });

// Usage with namespace:
// {t('auth:loginSuccess')}
// {t('dashboard:welcome')}
```

### 10.2 Lazy Loading for Performance

```typescript
// For better performance with many languages
import i18n from 'i18next';
import { initReactI18next } from 'react-i18next';
import LanguageDetector from 'i18next-browser-languagedetector';
import Backend from 'i18next-http-backend';

i18n
  .use(Backend)
  .use(LanguageDetector)
  .use(initReactI18next)
  .init({
    fallbackLng: 'pt-BR',
    debug: process.env.NODE_ENV === 'development',
    
    interpolation: {
      escapeValue: false,
    },

    backend: {
      loadPath: '/locales/{{lng}}/{{ns}}.json',
    },
    
    // Load namespaces on demand
    ns: ['common'],
    defaultNS: 'common',
  });
```

### 10.3 Translation Management Hook

```typescript
// Advanced hook for translation management
import { useTranslation } from 'react-i18next';
import { useGlobalLanguage } from './useGlobalLanguage';

export function useAdvancedTranslation() {
  const { t, i18n } = useTranslation();
  const { language } = useGlobalLanguage();

  const safeT = (key: string, options?: any) => {
    const translation = t(key, { ...options, defaultValue: key });
    
    // Log missing translations in development
    if (process.env.NODE_ENV === 'development' && translation === key) {
      console.warn(`Missing translation for key: ${key} in language: ${language}`);
    }
    
    return translation;
  };

  const formatCurrency = (amount: number) => {
    const locale = language === 'pt-BR' ? 'pt-BR' : 'en-US';
    const currency = language === 'pt-BR' ? 'BRL' : 'USD';
    
    return new Intl.NumberFormat(locale, {
      style: 'currency',
      currency: currency,
    }).format(amount);
  };

  const formatDate = (date: Date) => {
    const locale = language === 'pt-BR' ? 'pt-BR' : 'en-US';
    return new Intl.DateTimeFormat(locale).format(date);
  };

  const formatNumber = (number: number) => {
    const locale = language === 'pt-BR' ? 'pt-BR' : 'en-US';
    return new Intl.NumberFormat(locale).format(number);
  };

  return {
    t: safeT,
    i18n,
    language,
    formatCurrency,
    formatDate,
    formatNumber,
  };
}
```

---

## FINAL RESULT

After completing all phases, you will have:

✅ **Complete modern internationalization system**  
✅ **Support for 5 languages** (pt-BR, en, zh, es, fr)  
✅ **Visual selector with flags** 🇧🇷🇺🇸🇨🇳🇪🇸🇫🇷  
✅ **User choice persistence**  
✅ **Context provider integrated with react-i18next**  
✅ **Custom hook for global usage**  
✅ **Consistent pattern for new components**  
✅ **Fallbacks for missing translations**  
✅ **Production-ready performance**  
✅ **TypeScript support**  
✅ **Easily extensible for new languages**  

The system will be production-ready and easily maintainable for future development!

## NEXT STEPS

1. **Add more languages** as needed
2. **Implement translation management tools**
3. **Add pluralization rules** for complex cases
4. **Set up automated translation workflows**
5. **Add RTL language support** (Arabic, Hebrew)
6. **Implement translation key validation** in CI/CD